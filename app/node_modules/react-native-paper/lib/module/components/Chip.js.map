{"version":3,"sources":["Chip.tsx"],"names":["React","Animated","Platform","StyleSheet","TouchableWithoutFeedback","View","color","Icon","MaterialCommunityIcon","Surface","Text","TouchableRipple","withTheme","black","white","Chip","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","textStyle","style","theme","testID","selectedColor","ellipsizeMode","rest","current","elevation","useRef","Value","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","dark","colors","backgroundColor","surface","borderRadius","flatten","borderColor","undefined","alpha","rgb","string","textColor","text","iconColor","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityState","push","styles","container","OS","content","paddingRight","avatarWrapper","opacity","isValidElement","cloneElement","props","avatarSelected","fonts","regular","marginRight","marginLeft","closeButtonStyle","closeIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingLeft","position","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  AccessibilityTrait,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport type { IconSource } from './Icon';\nimport Icon from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { EllipsizeProp } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  ellipsizeMode,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const { dark, colors } = theme;\n\n  const {\n    backgroundColor = mode === 'outlined'\n      ? colors.surface\n      : dark\n      ? '#383838'\n      : '#ebebeb',\n    borderRadius = 16,\n  } = StyleSheet.flatten(style) || {};\n\n  const borderColor =\n    mode === 'outlined'\n      ? color(\n          selectedColor !== undefined\n            ? selectedColor\n            : color(dark ? white : black)\n        )\n          .alpha(0.29)\n          .rgb()\n          .string()\n      : backgroundColor;\n  const textColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.87)\n        .rgb()\n        .string();\n  const iconColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n  const selectedBackgroundColor = (dark\n    ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n    : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n  )\n    .rgb()\n    .string();\n\n  const underlayColor = selectedColor\n    ? color(selectedColor).fade(0.5).rgb().string()\n    : selectedBackgroundColor;\n\n  const accessibilityTraits: AccessibilityTrait[] = ['button'];\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={{ borderRadius }}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={accessibilityTraits}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View style={[styles.content, { paddingRight: onClose ? 32 : 4 }]}>\n          {avatar && !icon ? (\n            <View style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}>\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                avatar ? [styles.avatar, styles.avatarSelected] : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                ...theme.fonts.regular,\n                color: textColor,\n                marginRight: onClose ? 0 : 8,\n                marginLeft: avatar || icon || selected ? 4 : 8,\n              },\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View style={[styles.icon, styles.closeIcon]}>\n              <MaterialCommunityIcon\n                name=\"close-circle\"\n                size={16}\n                color={iconColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: 'row',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(Chip);\n"]}