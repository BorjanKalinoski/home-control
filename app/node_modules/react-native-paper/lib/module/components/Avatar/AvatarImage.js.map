{"version":3,"sources":["AvatarImage.tsx"],"names":["React","Image","StyleSheet","View","withTheme","defaultSize","AvatarImage","Component","render","props","size","source","style","theme","rest","colors","backgroundColor","primary","flatten","width","height","borderRadius"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,KADF,EAGEC,UAHF,EAIEC,IAJF,QAOO,cAPP;AAQA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,MAAMC,WAAW,GAAG,EAApB;;AAwBA;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMC,WAAN,SAA0BN,KAAK,CAACO,SAAhC,CAAiD;AAO/CC,EAAAA,MAAM,GAAG;AACP,wBAA8D,KAAKC,KAAnE;AAAA,UAAM;AAAEC,MAAAA,IAAI,GAAGL,WAAT;AAAsBM,MAAAA,MAAtB;AAA8BC,MAAAA,KAA9B;AAAqCC,MAAAA;AAArC,KAAN;AAAA,UAAqDC,IAArD;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaF,KAAnB;AAEA,UAAM;AAAEG,MAAAA,eAAe,GAAGD,MAAM,CAACE;AAA3B,QACJf,UAAU,CAACgB,OAAX,CAAmBN,KAAnB,KAA6B,EAD/B;AAGA,wBACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE,CACL;AACEO,QAAAA,KAAK,EAAET,IADT;AAEEU,QAAAA,MAAM,EAAEV,IAFV;AAGEW,QAAAA,YAAY,EAAEX,IAAI,GAAG,CAHvB;AAIEM,QAAAA;AAJF,OADK,EAOLJ,KAPK;AADT,OAUME,IAVN,GAYG,OAAOH,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAAC;AAAED,MAAAA;AAAF,KAAD,CAZzC,EAaG,OAAOC,MAAP,KAAkB,UAAlB,iBACC,oBAAC,KAAD;AACE,MAAA,MAAM,EAAEA,MADV;AAEE,MAAA,KAAK,EAAE;AAAEQ,QAAAA,KAAK,EAAET,IAAT;AAAeU,QAAAA,MAAM,EAAEV,IAAvB;AAA6BW,QAAAA,YAAY,EAAEX,IAAI,GAAG;AAAlD;AAFT,MAdJ,CADF;AAsBD;;AApC8C;;gBAA3CJ,W,iBACiB,c;;gBADjBA,W,kBAGkB;AACpBI,EAAAA,IAAI,EAAEL;AADc,C;;AAoCxB,eAAeD,SAAS,CAACE,WAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  Image,\n  ImageSourcePropType,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\n\nconst defaultSize = 64;\n\nexport type AvatarImageSource =\n  | ImageSourcePropType\n  | ((props: { size: number }) => React.ReactNode);\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Image to display for the `Avatar`.\n   * It accepts a standard React Native Image `source` prop\n   * Or a function that returns an `Image`.\n   */\n  source: AvatarImageSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-image.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Image size={24} source={require('../assets/avatar.png')} />\n * );\n * export default MyComponent\n * ```\n */\nclass AvatarImage extends React.Component<Props> {\n  static displayName = 'Avatar.Image';\n\n  static defaultProps = {\n    size: defaultSize,\n  };\n\n  render() {\n    const { size = defaultSize, source, style, theme, ...rest } = this.props;\n    const { colors } = theme;\n\n    const { backgroundColor = colors.primary } =\n      StyleSheet.flatten(style) || {};\n\n    return (\n      <View\n        style={[\n          {\n            width: size,\n            height: size,\n            borderRadius: size / 2,\n            backgroundColor,\n          },\n          style,\n        ]}\n        {...rest}\n      >\n        {typeof source === 'function' && source({ size })}\n        {typeof source !== 'function' && (\n          <Image\n            source={source}\n            style={{ width: size, height: size, borderRadius: size / 2 }}\n          />\n        )}\n      </View>\n    );\n  }\n}\n\nexport default withTheme(AvatarImage);\n"]}