{"version":3,"sources":["AvatarText.tsx"],"names":["React","View","StyleSheet","Color","Text","withTheme","white","defaultSize","AvatarText","Component","render","props","label","size","style","theme","labelStyle","color","rest","flatten","backgroundColor","colors","primary","restStyle","textColor","isLight","width","height","borderRadius","styles","container","text","fontSize","lineHeight","create","justifyContent","alignItems","textAlign","textAlignVertical"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,IADF,EAGEC,UAHF,QAMO,cANP;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAEA,MAAMC,WAAW,GAAG,EAApB;;AA6BA;;;;;;;;;;;;;;;;;;;AAmBA,MAAMC,UAAN,SAAyBR,KAAK,CAACS,SAA/B,CAAgD;AAO9CC,EAAAA,MAAM,GAAG;AACP,wBAQI,KAAKC,KART;AAAA,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,IAAI,GAAGN,WAFH;AAGJO,MAAAA,KAHI;AAIJC,MAAAA,KAJI;AAKJC,MAAAA,UALI;AAMJC,MAAAA;AANI,KAAN;AAAA,UAOKC,IAPL;;AAUA,iBACEhB,UAAU,CAACiB,OAAX,CAAmBL,KAAnB,KAA6B,EAD/B;AAAA,UAAM;AAAEM,MAAAA,eAAe,GAAGL,KAAK,CAACM,MAAN,CAAaC;AAAjC,KAAN;AAAA,UAAmDC,SAAnD;;AAEA,UAAMC,SAAS,GACbP,KAAK,KACJd,KAAK,CAACiB,eAAD,CAAL,CAAuBK,OAAvB,KAAmC,oBAAnC,GAA0DnB,KADtD,CADP;AAIA,wBACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE,CACL;AACEoB,QAAAA,KAAK,EAAEb,IADT;AAEEc,QAAAA,MAAM,EAAEd,IAFV;AAGEe,QAAAA,YAAY,EAAEf,IAAI,GAAG,CAHvB;AAIEO,QAAAA;AAJF,OADK,EAOLS,MAAM,CAACC,SAPF,EAQLP,SARK;AADT,OAWML,IAXN,gBAaE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE,CACLW,MAAM,CAACE,IADF,EAEL;AACEd,QAAAA,KAAK,EAAEO,SADT;AAEEQ,QAAAA,QAAQ,EAAEnB,IAAI,GAAG,CAFnB;AAGEoB,QAAAA,UAAU,EAAEpB;AAHd,OAFK,EAOLG,UAPK,CADT;AAUE,MAAA,aAAa,EAAE;AAVjB,OAYGJ,KAZH,CAbF,CADF;AA8BD;;AAtD6C;;gBAA1CJ,U,iBACiB,a;;gBADjBA,U,kBAGkB;AACpBK,EAAAA,IAAI,EAAEN;AADc,C;;AAsDxB,MAAMsB,MAAM,GAAG3B,UAAU,CAACgC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,cAAc,EAAE,QADP;AAETC,IAAAA,UAAU,EAAE;AAFH,GADoB;AAK/BL,EAAAA,IAAI,EAAE;AACJM,IAAAA,SAAS,EAAE,QADP;AAEJC,IAAAA,iBAAiB,EAAE;AAFf;AALyB,CAAlB,CAAf;AAWA,eAAejC,SAAS,CAACG,UAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport Color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\n\nconst defaultSize = 64;\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nclass AvatarText extends React.Component<Props> {\n  static displayName = 'Avatar.Text';\n\n  static defaultProps = {\n    size: defaultSize,\n  };\n\n  render() {\n    const {\n      label,\n      size = defaultSize,\n      style,\n      theme,\n      labelStyle,\n      color,\n      ...rest\n    } = this.props;\n\n    const { backgroundColor = theme.colors.primary, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor =\n      color ||\n      (Color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n\n    return (\n      <View\n        style={[\n          {\n            width: size,\n            height: size,\n            borderRadius: size / 2,\n            backgroundColor,\n          },\n          styles.container,\n          restStyle,\n        ]}\n        {...rest}\n      >\n        <Text\n          style={[\n            styles.text,\n            {\n              color: textColor,\n              fontSize: size / 2,\n              lineHeight: size,\n            },\n            labelStyle,\n          ]}\n          numberOfLines={1}\n        >\n          {label}\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default withTheme(AvatarText);\n"]}