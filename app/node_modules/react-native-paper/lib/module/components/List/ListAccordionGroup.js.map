{"version":3,"sources":["ListAccordionGroup.tsx"],"names":["React","ListAccordionGroupContext","createContext","ListAccordionGroup","Component","expandedId","undefined","setState","currentExpandedId","render","onAccordionPress","children","props","state"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAsBA,OAAO,MAAMC,yBAAyB,gBAAGD,KAAK,CAACE,aAAN,CAEvC,IAFuC,CAAlC;;AAQP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,MAAMC,kBAAN,SAAiCH,KAAK,CAACI,SAAvC,CAA+D;AAAA;AAAA;;AAAA,mCAG9C;AACbC,MAAAA,UAAU,EAAEC;AADC,KAH8C;;AAAA,8CAOzCD,UAAD,IAAiC;AAClD,WAAKE,QAAL,CAAc,CAAC;AAAEF,QAAAA,UAAU,EAAEG;AAAd,OAAD,MAAwC;AACpDH,QAAAA,UAAU,EAAEG,iBAAiB,KAAKH,UAAtB,GAAmCC,SAAnC,GAA+CD;AADP,OAAxC,CAAd;AAGD,KAX4D;AAAA;;AAa7DI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEJ,MAAAA,UAAF;AAAcK,MAAAA,gBAAd;AAAgCC,MAAAA;AAAhC,QAA6C,KAAKC,KAAxD;AAEA,wBACE,oBAAC,yBAAD,CAA2B,QAA3B;AACE,MAAA,KAAK,EAAE;AACLP,QAAAA,UAAU,EAAEA,UAAU,IAAI,KAAKQ,KAAL,CAAWR,UADhC;AAC4C;AACjDK,QAAAA,gBAAgB,EAAEA,gBAAgB,IAAI,KAAKA;AAFtC;AADT,OAMGC,QANH,CADF;AAUD;;AA1B4D;;gBAAzDR,kB,iBACiB,qB;;AA4BvB,eAAeA,kBAAf","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\ntype State = {\n  expandedId: string | number | undefined;\n};\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nclass ListAccordionGroup extends React.Component<Props, State> {\n  static displayName = 'List.AccordionGroup';\n\n  state: State = {\n    expandedId: undefined,\n  };\n\n  onAccordionPress = (expandedId: string | number) => {\n    this.setState(({ expandedId: currentExpandedId }) => ({\n      expandedId: currentExpandedId === expandedId ? undefined : expandedId,\n    }));\n  };\n\n  render() {\n    const { expandedId, onAccordionPress, children } = this.props;\n\n    return (\n      <ListAccordionGroupContext.Provider\n        value={{\n          expandedId: expandedId || this.state.expandedId, // component can be controlled or uncontrolled\n          onAccordionPress: onAccordionPress || this.onAccordionPress,\n        }}\n      >\n        {children}\n      </ListAccordionGroupContext.Provider>\n    );\n  }\n}\n\nexport default ListAccordionGroup;\n"]}