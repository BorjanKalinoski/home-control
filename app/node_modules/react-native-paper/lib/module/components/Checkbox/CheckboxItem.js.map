{"version":3,"sources":["CheckboxItem.tsx"],"names":["React","StyleSheet","View","CheckBox","Text","TouchableRipple","withTheme","CheckboxItem","style","status","label","onPress","labelStyle","theme","colors","testID","props","styles","container","color","primary","displayName","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAEEC,UAFF,EAIEC,IAJF,QAMO,cANP;AAQA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,SAASC,SAAT,QAA0B,oBAA1B;;AA6CA;;;;;;;;;;;;;;;;;;AAmBA,MAAMC,YAAY,GAAG;AAAA,MAAC;AACpBC,IAAAA,KADoB;AAEpBC,IAAAA,MAFoB;AAGpBC,IAAAA,KAHoB;AAIpBC,IAAAA,OAJoB;AAKpBC,IAAAA,UALoB;AAMpBC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KANa;AAOpBC,IAAAA;AAPoB,GAAD;AAAA,MAQhBC,KARgB;;AAAA,sBAUnB,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAEL,OAA1B;AAAmC,IAAA,MAAM,EAAEI;AAA3C,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACE,MAAM,CAACC,SAAR,EAAmBV,KAAnB,CAAb;AAAwC,IAAA,aAAa,EAAC;AAAtD,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACS,MAAM,CAACP,KAAR,EAAe;AAAES,MAAAA,KAAK,EAAEL,MAAM,CAACM;AAAhB,KAAf,EAA0CR,UAA1C;AAAb,KACGF,KADH,CADF,eAIE,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAED;AAAlB,KAA8BO,KAA9B,EAJF,CADF,CAVmB;AAAA,CAArB;;AAoBAT,YAAY,CAACc,WAAb,GAA2B,eAA3B;AAEA,eAAef,SAAS,CAACC,YAAD,CAAxB,C,CAEA;;AACA,SAASA,YAAT;AAEA,MAAMU,MAAM,GAAGhB,UAAU,CAACqB,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,aAAa,EAAE,KADN;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,eAHP;AAITC,IAAAA,eAAe,EAAE,CAJR;AAKTC,IAAAA,iBAAiB,EAAE;AALV,GADoB;AAQ/BjB,EAAAA,KAAK,EAAE;AACLkB,IAAAA,QAAQ,EAAE;AADL;AARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport CheckBox from './Checkbox';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme: { colors },\n  testID,\n  ...props\n}: Props) => (\n  <TouchableRipple onPress={onPress} testID={testID}>\n    <View style={[styles.container, style]} pointerEvents=\"none\">\n      <Text style={[styles.label, { color: colors.primary }, labelStyle]}>\n        {label}\n      </Text>\n      <CheckBox status={status} {...props}></CheckBox>\n    </View>\n  </TouchableRipple>\n);\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nexport { CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]}