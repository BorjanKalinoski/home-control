{"version":3,"sources":["RadioButtonItem.tsx"],"names":["React","View","StyleSheet","withTheme","RadioButtonContext","handlePress","TouchableRipple","RadioButton","Text","RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","colors","accessibilityLabel","context","undefined","onValueChange","styles","container","text","displayName","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,IADF,EAEEC,UAFF,QAMO,cANP;AAOA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,kBAAT,QAA2D,oBAA3D;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;AAiDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAMC,eAAe,GAAG,CAAC;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,KAFuB;AAGvBC,EAAAA,KAHuB;AAIvBC,EAAAA,UAJuB;AAKvBC,EAAAA,OALuB;AAMvBC,EAAAA,QANuB;AAOvBC,EAAAA,KAPuB;AAQvBC,EAAAA,cARuB;AASvBC,EAAAA,MATuB;AAUvBC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF,GAVgB;AAWvBC,EAAAA;AAXuB,CAAD,kBAatB,oBAAC,kBAAD,CAAoB,QAApB,QACIC,OAAD,IAAsC;AACrC,sBACE,oBAAC,eAAD;AACE,IAAA,OAAO,EACLP,QAAQ,GACJQ,SADI,GAEJ,MACElB,WAAW,CAAC;AACVS,MAAAA,OAAO,EAAEA,OADC;AAEVU,MAAAA,aAAa,EAAEF,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEE,aAFd;AAGVd,MAAAA;AAHU,KAAD,CALrB;AAWE,IAAA,kBAAkB,EAAEW;AAXtB,kBAaE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACI,MAAM,CAACC,SAAR,EAAmBd,KAAnB,CAAb;AAAwC,IAAA,aAAa,EAAC;AAAtD,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACa,MAAM,CAACd,KAAR,EAAe;AAAEK,MAAAA,KAAK,EAAEI,MAAM,CAACO;AAAhB,KAAf,EAAuCd,UAAvC;AAAb,KACGF,KADH,CADF,eAIE,oBAAC,WAAD;AACE,IAAA,KAAK,EAAED,KADT;AAEE,IAAA,QAAQ,EAAEK,QAFZ;AAGE,IAAA,MAAM,EAAEG,MAHV;AAIE,IAAA,KAAK,EAAEF,KAJT;AAKE,IAAA,cAAc,EAAEC;AALlB,IAJF,CAbF,CADF;AA4BD,CA9BH,CAbF;;AA+CAR,eAAe,CAACmB,WAAhB,GAA8B,kBAA9B;AAEA,eAAezB,SAAS,CAACM,eAAD,CAAxB,C,CAEA;;AACA,SAASA,eAAT;AAEA,MAAMgB,MAAM,GAAGvB,UAAU,CAAC2B,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,aAAa,EAAE,KADN;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,eAHP;AAITC,IAAAA,eAAe,EAAE,CAJR;AAKTC,IAAAA,iBAAiB,EAAE;AALV,GADoB;AAQ/BvB,EAAAA,KAAK,EAAE;AACLwB,IAAAA,QAAQ,EAAE;AADL;AARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: { colors },\n  accessibilityLabel,\n}: Props) => (\n  <RadioButtonContext.Consumer>\n    {(context?: RadioButtonContextType) => {\n      return (\n        <TouchableRipple\n          onPress={\n            disabled\n              ? undefined\n              : () =>\n                  handlePress({\n                    onPress: onPress,\n                    onValueChange: context?.onValueChange,\n                    value,\n                  })\n          }\n          accessibilityLabel={accessibilityLabel}\n        >\n          <View style={[styles.container, style]} pointerEvents=\"none\">\n            <Text style={[styles.label, { color: colors.text }, labelStyle]}>\n              {label}\n            </Text>\n            <RadioButton\n              value={value}\n              disabled={disabled}\n              status={status}\n              color={color}\n              uncheckedColor={uncheckedColor}\n            />\n          </View>\n        </TouchableRipple>\n      );\n    }}\n  </RadioButtonContext.Consumer>\n);\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]}