{"version":3,"sources":["Card.tsx"],"names":["React","StyleSheet","Animated","TouchableWithoutFeedback","View","CardContent","CardActions","CardCover","CardTitle","Surface","withTheme","Card","elevation","cardElevation","onLongPress","onPress","children","style","theme","testID","accessible","rest","current","useRef","Value","handlePressIn","dark","mode","animation","scale","timing","toValue","duration","useNativeDriver","start","handlePressOut","roundness","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderRadius","undefined","styles","innerContainer","index","cloneElement","Content","Actions","Cover","Title","create","flexGrow","flexShrink"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const { roundness } = theme;\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  return (\n    <Surface\n      // @ts-ignore\n      style={[{ borderRadius: roundness, elevation }, style]}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress ? handlePressIn : undefined}\n        onPressOut={onPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]}