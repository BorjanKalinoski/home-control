{"version":3,"sources":["MenuItem.tsx"],"names":["color","React","View","StyleSheet","Icon","TouchableRipple","Text","withTheme","black","white","MenuItem","Component","render","icon","title","disabled","onPress","theme","style","testID","titleStyle","props","disabledColor","dark","alpha","rgb","string","titleColor","colors","text","iconColor","styles","container","row","item","content","widthWithIcon","minWidth","maxWidth","iconWidth","create","paddingHorizontal","height","justifyContent","flexDirection","width","fontSize","marginHorizontal"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,IADF,EAEEC,UAFF,QAMO,cANP;AAOA,OAAOC,IAAP,MAAiC,SAAjC;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,qBAA7B;;AA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAMC,QAAN,SAAuBT,KAAK,CAACU,SAA7B,CAA8C;AAG5CC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,IADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,QAHI;AAIJC,MAAAA,OAJI;AAKJC,MAAAA,KALI;AAMJC,MAAAA,KANI;AAOJC,MAAAA,MAPI;AAQJC,MAAAA;AARI,QASF,KAAKC,KATT;AAWA,UAAMC,aAAa,GAAGtB,KAAK,CAACiB,KAAK,CAACM,IAAN,GAAad,KAAb,GAAqBD,KAAtB,CAAL,CACnBgB,KADmB,CACb,IADa,EAEnBC,GAFmB,GAGnBC,MAHmB,EAAtB;AAKA,UAAMC,UAAU,GAAGZ,QAAQ,GACvBO,aADuB,GAEvBtB,KAAK,CAACiB,KAAK,CAACW,MAAN,CAAaC,IAAd,CAAL,CAAyBL,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAFJ;AAIA,UAAMI,SAAS,GAAGf,QAAQ,GACtBO,aADsB,GAEtBtB,KAAK,CAACiB,KAAK,CAACW,MAAN,CAAaC,IAAd,CAAL,CAAyBL,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAFJ;AAIA,wBACE,oBAAC,eAAD;AACE,MAAA,KAAK,EAAE,CAACK,MAAM,CAACC,SAAR,EAAmBd,KAAnB,CADT;AAEE,MAAA,OAAO,EAAEF,OAFX;AAGE,MAAA,QAAQ,EAAED,QAHZ;AAIE,MAAA,MAAM,EAAEI;AAJV,oBAME,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEY,MAAM,CAACE;AAApB,OACGpB,IAAI,gBACH,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAACkB,MAAM,CAACG,IAAR,EAAcH,MAAM,CAAClB,IAArB,CAAb;AAAyC,MAAA,aAAa,EAAC;AAAvD,oBACE,oBAAC,IAAD;AAAM,MAAA,MAAM,EAAEA,IAAd;AAAoB,MAAA,IAAI,EAAE,EAA1B;AAA8B,MAAA,KAAK,EAAEiB;AAArC,MADF,CADG,GAID,IALN,eAME,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE,CACLC,MAAM,CAACG,IADF,EAELH,MAAM,CAACI,OAFF,EAGLtB,IAAI,GAAGkB,MAAM,CAACK,aAAV,GAA0B,IAHzB,CADT;AAME,MAAA,aAAa,EAAC;AANhB,oBAQE,oBAAC,IAAD;AACE,MAAA,aAAa,EAAE,CADjB;AAEE,MAAA,KAAK,EAAE,CAACL,MAAM,CAACjB,KAAR,EAAe;AAAEd,QAAAA,KAAK,EAAE2B;AAAT,OAAf,EAAsCP,UAAtC;AAFT,OAIGN,KAJH,CARF,CANF,CANF,CADF;AA+BD;;AA3D2C;;gBAAxCJ,Q,iBACiB,W;;AA6DvB,MAAM2B,QAAQ,GAAG,GAAjB;AACA,MAAMC,QAAQ,GAAG,GAAjB;AACA,MAAMC,SAAS,GAAG,EAAlB;AAEA,MAAMR,MAAM,GAAG5B,UAAU,CAACqC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,iBAAiB,EAAE,CADV;AAETJ,IAAAA,QAFS;AAGTC,IAAAA,QAHS;AAITI,IAAAA,MAAM,EAAE,EAJC;AAKTC,IAAAA,cAAc,EAAE;AALP,GADoB;AAQ/BV,EAAAA,GAAG,EAAE;AACHW,IAAAA,aAAa,EAAE;AADZ,GAR0B;AAW/B/B,EAAAA,IAAI,EAAE;AACJgC,IAAAA,KAAK,EAAEN;AADH,GAXyB;AAc/BzB,EAAAA,KAAK,EAAE;AACLgC,IAAAA,QAAQ,EAAE;AADL,GAdwB;AAiB/BZ,EAAAA,IAAI,EAAE;AACJa,IAAAA,gBAAgB,EAAE;AADd,GAjByB;AAoB/BZ,EAAAA,OAAO,EAAE;AACPQ,IAAAA,cAAc,EAAE,QADT;AAEPN,IAAAA,QAAQ,EAAEA,QAAQ,GAAG,EAFd;AAGPC,IAAAA,QAAQ,EAAEA,QAAQ,GAAG;AAHd,GApBsB;AAyB/BF,EAAAA,aAAa,EAAE;AACbE,IAAAA,QAAQ,EAAEA,QAAQ,IAAIC,SAAS,GAAG,EAAhB;AADL;AAzBgB,CAAlB,CAAf;AA8BA,eAAehC,SAAS,CAACG,QAAD,CAAxB,C,CAEA;;AACA,SAASA,QAAT","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  TextStyle,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const {\n      icon,\n      title,\n      disabled,\n      onPress,\n      theme,\n      style,\n      testID,\n      titleStyle,\n    } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text).alpha(0.87).rgb().string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text).alpha(0.54).rgb().string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n        testID={testID}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[\n              styles.item,\n              styles.content,\n              icon ? styles.widthWithIcon : null,\n            ]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]}