{"version":3,"sources":["TextInput.tsx"],"names":["React","Animated","TextInput","NativeTextInput","Platform","TextInputOutlined","TextInputFlat","TextInputIcon","TextInputAffix","withTheme","BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","Component","props","value","undefined","defaultValue","labeled","Value","validInputValue","error","focused","placeholder","labelLayout","measured","width","height","leftLayout","rightLayout","timer","clearTimeout","setTimeout","setState","scale","theme","animation","timing","state","toValue","duration","useNativeDriver","select","ios","default","start","hidePlaceholder","event","nativeEvent","layout","args","disabled","editable","onFocus","onBlur","onChangeText","e","root","focus","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","isFocusChanged","isValueChanged","isLabelLayoutChanged","isLabelChanged","label","isErrorChanged","minimizeLabel","restoreLabel","showPlaceholder","showError","hideError","componentWillUnmount","setNativeProps","isFocused","clear","blur","render","mode","rest","ref","handleFocus","forceFocus","handleBlur","handleChangeText","handleLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","dense","multiline"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  Platform,\n  LayoutChangeEvent,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon from './Adornment/Icon';\nimport TextInputAffix from './Adornment/Affix';\nimport { withTheme } from '../../core/theming';\nimport type { RenderProps, State } from './types';\nimport type { $Omit } from '../../types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text to use for the floating label.\n   */\n  label?: string;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `heigh` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://facebook.github.io/react-native/docs/textinput.html#props\n */\n\nclass TextInput extends React.Component<TextInputProps, State> {\n  // @component ./Adornment/Icon.tsx\n  static Icon = TextInputIcon;\n\n  // @component ./Adornment/Affix.tsx\n  static Affix = TextInputAffix;\n\n  static defaultProps: Partial<TextInputProps> = {\n    mode: 'flat',\n    dense: false,\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  static getDerivedStateFromProps(nextProps: TextInputProps, prevState: State) {\n    return {\n      value:\n        typeof nextProps.value !== 'undefined'\n          ? nextProps.value\n          : prevState.value,\n    };\n  }\n  validInputValue =\n    this.props.value !== undefined ? this.props.value : this.props.defaultValue;\n\n  state = {\n    labeled: new Animated.Value(this.validInputValue ? 0 : 1),\n    error: new Animated.Value(this.props.error ? 1 : 0),\n    focused: false,\n    placeholder: '',\n    value: this.validInputValue,\n    labelLayout: {\n      measured: false,\n      width: 0,\n      height: 0,\n    },\n    leftLayout: {\n      width: null,\n      height: null,\n    },\n    rightLayout: {\n      width: null,\n      height: null,\n    },\n  };\n\n  ref: NativeTextInput | undefined | null;\n\n  componentDidUpdate(prevProps: TextInputProps, prevState: State) {\n    const isFocusChanged = prevState.focused !== this.state.focused;\n    const isValueChanged = prevState.value !== this.state.value;\n    const isLabelLayoutChanged =\n      prevState.labelLayout !== this.state.labelLayout;\n    const isLabelChanged = prevProps.label !== this.props.label;\n    const isErrorChanged = prevProps.error !== this.props.error;\n\n    if (\n      isFocusChanged ||\n      isValueChanged ||\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      isLabelLayoutChanged\n    ) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused) {\n        this.minimizeLabel();\n      } else {\n        this.restoreLabel();\n      }\n    }\n\n    if (isFocusChanged || isLabelChanged) {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || !this.props.label) {\n        this.showPlaceholder();\n      } else {\n        this.hidePlaceholder();\n      }\n    }\n\n    if (isErrorChanged) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this.showError();\n      } else {\n        this.hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  private showPlaceholder = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Set the placeholder in a delay to offset the label animation\n    // If we show it immediately, they'll overlap and look ugly\n    // @ts-ignore\n    this.timer = setTimeout(\n      () =>\n        this.setState({\n          placeholder: this.props.placeholder,\n        }),\n      50\n    );\n  };\n\n  private hidePlaceholder = () =>\n    this.setState({\n      placeholder: '',\n    });\n\n  private timer?: number;\n  private root: NativeTextInput | undefined | null;\n\n  private showError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start(this.hidePlaceholder);\n  };\n\n  private hideError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private restoreLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private minimizeLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\n    this.setState({\n      leftLayout: {\n        height: event.nativeEvent.layout.height,\n        width: event.nativeEvent.layout.width,\n      },\n    });\n  };\n\n  private onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\n    this.setState({\n      rightLayout: {\n        width: event.nativeEvent.layout.width,\n        height: event.nativeEvent.layout.height,\n      },\n    });\n  };\n\n  private handleFocus = (args: any) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(args);\n    }\n  };\n\n  private handleBlur = (args: Object) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: false });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(args);\n    }\n  };\n\n  private handleChangeText = (value: string) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ value });\n    this.props.onChangeText && this.props.onChangeText(value);\n  };\n\n  private handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n    this.setState({\n      labelLayout: {\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      },\n    });\n  };\n\n  forceFocus = () => {\n    return this.root?.focus();\n  };\n\n  /**\n   * @internal\n   */\n  setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n  render() {\n    const { mode, ...rest } = this.props as $Omit<TextInputProps, 'ref'>;\n\n    return mode === 'outlined' ? (\n      <TextInputOutlined\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={(ref) => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        forceFocus={this.forceFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={this.onRightAffixLayoutChange}\n      />\n    ) : (\n      <TextInputFlat\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={(ref) => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        forceFocus={this.forceFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={this.onRightAffixLayoutChange}\n      />\n    );\n  }\n}\n\nexport default withTheme(TextInput);\n"]}