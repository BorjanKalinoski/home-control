{"version":3,"sources":["Affix.tsx"],"names":["React","color","Text","StyleSheet","Animated","withTheme","AdornmentSide","AFFIX_OFFSET","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","affix","onLayout","visible","TextInputAffix","text","theme","useContext","textColor","colors","alpha","dark","rgb","string","style","top","styles","container","opacity","interpolate","inputRange","outputRange","displayName","create","position","justifyContent","alignItems"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,IADF,EAEEC,UAFF,EAMEC,QANF,QAOO,cAPP;AASA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,aAAT,QAA8B,SAA9B;AAEA,MAAMC,YAAY,GAAG,EAArB;AAmBA,MAAMC,YAAY,gBAAGR,KAAK,CAACS,aAAN,CAAkC;AACrDC,EAAAA,SAAS,EAAE;AAAEC,IAAAA,UAAU,EAAE,EAAd;AAAkBV,IAAAA,KAAK,EAAE;AAAzB,GAD0C;AAErDW,EAAAA,WAAW,EAAE,IAFwC;AAGrDC,EAAAA,IAAI,EAAEP,aAAa,CAACQ;AAHiC,CAAlC,CAArB;AAMA,OAAO,MAAMC,cAKZ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASH,EAAAA,IAAT;AAAeH,EAAAA,SAAf;AAA0BE,EAAAA,WAA1B;AAAuCK,EAAAA,QAAvC;AAAiDC,EAAAA;AAAjD,CAAD,KAAgE;AAClE,sBACE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLL,MAAAA,IADK;AAELH,MAAAA,SAFK;AAGLE,MAAAA,WAHK;AAILK,MAAAA,QAJK;AAKLC,MAAAA;AALK;AADT,KASGF,KATH,CADF;AAaD,CAnBM;;AAqBP,MAAMG,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA4B;AACjD,QAAM;AAAEX,IAAAA,SAAF;AAAaO,IAAAA,QAAb;AAAuBL,IAAAA,WAAvB;AAAoCC,IAAAA,IAApC;AAA0CK,IAAAA;AAA1C,MAAsDlB,KAAK,CAACsB,UAAN,CAC1Dd,YAD0D,CAA5D;AAGA,QAAMe,SAAS,GAAGtB,KAAK,CAACoB,KAAK,CAACG,MAAN,CAAaJ,IAAd,CAAL,CACfK,KADe,CACTJ,KAAK,CAACK,IAAN,GAAa,GAAb,GAAmB,IADV,EAEfC,GAFe,GAGfC,MAHe,EAAlB;AAKA,QAAMC,KAAK,GAAG;AACZC,IAAAA,GAAG,EAAElB,WADO;AAEZ,KAACC,IAAD,GAAQN;AAFI,GAAd;AAKA,sBACE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACLwB,MAAM,CAACC,SADF,EAELH,KAFK,EAGL;AACEI,MAAAA,OAAO,EACL,CAAAf,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEgB,WAAT,CAAqB;AACnBC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADO;AAEnBC,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFM,OAArB,MAGM;AALV,KAHK,CADT;AAYE,IAAA,QAAQ,EAAEnB;AAZZ,kBAcE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAC;AAAEhB,MAAAA,KAAK,EAAEsB;AAAT,KAAD,EAAuBb,SAAvB;AAAb,KAAiDU,IAAjD,CAdF,CADF;AAkBD,CAhCD;;AAiCAD,cAAc,CAACkB,WAAf,GAA6B,iBAA7B;AAEA,MAAMN,MAAM,GAAG5B,UAAU,CAACmC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,QAAQ,EAAE,UADD;AAETC,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,UAAU,EAAE;AAHH;AADoB,CAAlB,CAAf;AAQA,eAAepC,SAAS,CAACc,cAAD,CAAxB,C,CAEA;;AACA,SAASA,cAAT","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\ntype Props = {\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nexport const AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({ affix, side, textStyle, topPosition, onLayout, visible }) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\nconst TextInputAffix = ({ text, theme }: Props) => {\n  const { textStyle, onLayout, topPosition, side, visible } = React.useContext(\n    AffixContext\n  );\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const style = {\n    top: topPosition,\n    [side]: AFFIX_OFFSET,\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text style={[{ color: textColor }, textStyle]}>{text}</Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix };\n"]}