{"version":3,"sources":["Searchbar.tsx"],"names":["Searchbar","React","Component","clear","props","onChangeText","setNativeProps","args","root","isFocused","focus","blur","render","clearAccessibilityLabel","clearIcon","icon","iconColor","customIconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","style","theme","value","rest","colors","roundness","dark","fonts","textColor","text","font","regular","alpha","rgb","string","rippleColor","borderRadius","elevation","styles","container","size","color","I18nManager","isRTL","input","primary","c","handleClearPress","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nclass Searchbar extends React.Component<Props> {\n  static defaultProps = {\n    searchAccessibilityLabel: 'search',\n    clearAccessibilityLabel: 'clear',\n  };\n  private handleClearPress = () => {\n    this.clear();\n    this.props.onChangeText && this.props.onChangeText('');\n  };\n\n  private root: TextInput | undefined | null;\n\n  /**\n   * @internal\n   */ setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n\n  render() {\n    const {\n      clearAccessibilityLabel,\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel,\n      style,\n      theme,\n      value,\n      ...rest\n    } = this.props;\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[styles.input, { color: textColor, ...font }, inputStyle]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={(c) => {\n            this.root = c;\n          }}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={this.handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]}