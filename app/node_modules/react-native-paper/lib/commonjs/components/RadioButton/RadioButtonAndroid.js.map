{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["BORDER_WIDTH","RadioButtonAndroid","disabled","onPress","theme","value","status","rest","current","borderAnim","React","useRef","Animated","Value","radioAnim","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","context","checked","contextValue","fade","undefined","onValueChange","styles","container","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor: string, radioColor: string;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"button\"\n            accessibilityState={{ disabled }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: radioColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: radioColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n"]}