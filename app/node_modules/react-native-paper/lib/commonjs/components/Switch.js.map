{"version":3,"sources":["Switch.tsx"],"names":["version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","React","Component","render","props","value","disabled","onValueChange","color","theme","rest","checkedColor","colors","accent","onTintColor","Platform","OS","dark","white","alpha","rgb","string","black","thumbTintColor","grey800","grey400","grey50","major","minor","thumbColor","trackColor","true","false"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAOA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,OAAO,GAAGC,2BAAcC,iBAAd,GACZD,2BAAcC,iBAAd,CAAgCC,kBADpB,GAEZC,SAFJ;;AA4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,MAAMC,MAAN,SAAqBC,KAAK,CAACC,SAA3B,CAA4C;AAC1CC,EAAAA,MAAM,GAAG;AACP,wBAOI,KAAKC,KAPT;AAAA,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,QAFI;AAGJC,MAAAA,aAHI;AAIJC,MAAAA,KAJI;AAKJC,MAAAA;AALI,KAAN;AAAA,UAMKC,IANL;;AASA,UAAMC,YAAY,GAAGH,KAAK,IAAIC,KAAK,CAACG,MAAN,CAAaC,MAA3C;AAEA,UAAMC,WAAW,GACfC,sBAASC,EAAT,KAAgB,KAAhB,GACIL,YADJ,GAEIL,QAAQ,GACRG,KAAK,CAACQ,IAAN,GACE,oBAASC,aAAT,EAAgBC,KAAhB,CAAsB,GAAtB,EAA2BC,GAA3B,GAAiCC,MAAjC,EADF,GAEE,oBAASC,aAAT,EAAgBH,KAAhB,CAAsB,IAAtB,EAA4BC,GAA5B,GAAkCC,MAAlC,EAHM,GAIR,oBAASV,YAAT,EAAuBQ,KAAvB,CAA6B,GAA7B,EAAkCC,GAAlC,GAAwCC,MAAxC,EAPN;AASA,UAAME,cAAc,GAClBR,sBAASC,EAAT,KAAgB,KAAhB,GACIjB,SADJ,GAEIO,QAAQ,GACRG,KAAK,CAACQ,IAAN,GACEO,eADF,GAEEC,eAHM,GAIRpB,KAAK,GACLM,YADK,GAELF,KAAK,CAACQ,IAAN,GACAQ,eADA,GAEAC,cAXN;AAaA,UAAMtB,KAAK,GACTT,OAAO,IAAIA,OAAO,CAACgC,KAAR,KAAkB,CAA7B,IAAkChC,OAAO,CAACiC,KAAR,IAAiB,EAAnD,GACI;AACEd,MAAAA,WADF;AAEES,MAAAA;AAFF,KADJ,GAKI;AACEM,MAAAA,UAAU,EAAEN,cADd;AAEEO,MAAAA,UAAU,EAAE;AACVC,QAAAA,IAAI,EAAEjB,WADI;AAEVkB,QAAAA,KAAK,EAAE;AAFG;AAFd,KANN;AAcA,wBACE,oBAAC,mBAAD;AACE,MAAA,KAAK,EAAE3B,KADT;AAEE,MAAA,QAAQ,EAAEC,QAFZ;AAGE,MAAA,aAAa,EAAEA,QAAQ,GAAGP,SAAH,GAAeQ;AAHxC,OAIMH,KAJN,EAKMM,IALN,EADF;AASD;;AA1DyC;;eA6D7B,wBAAUV,MAAV,C","sourcesContent":["import * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\ntype Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Switch extends React.Component<Props> {\n  render() {\n    const {\n      value,\n      disabled,\n      onValueChange,\n      color,\n      theme,\n      ...rest\n    } = this.props;\n\n    const checkedColor = color || theme.colors.accent;\n\n    const onTintColor =\n      Platform.OS === 'ios'\n        ? checkedColor\n        : disabled\n        ? theme.dark\n          ? setColor(white).alpha(0.1).rgb().string()\n          : setColor(black).alpha(0.12).rgb().string()\n        : setColor(checkedColor).alpha(0.5).rgb().string();\n\n    const thumbTintColor =\n      Platform.OS === 'ios'\n        ? undefined\n        : disabled\n        ? theme.dark\n          ? grey800\n          : grey400\n        : value\n        ? checkedColor\n        : theme.dark\n        ? grey400\n        : grey50;\n\n    const props =\n      version && version.major === 0 && version.minor <= 56\n        ? {\n            onTintColor,\n            thumbTintColor,\n          }\n        : {\n            thumbColor: thumbTintColor,\n            trackColor: {\n              true: onTintColor,\n              false: '',\n            },\n          };\n\n    return (\n      <NativeSwitch\n        value={value}\n        disabled={disabled}\n        onValueChange={disabled ? undefined : onValueChange}\n        {...props}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport default withTheme(Switch);\n"]}