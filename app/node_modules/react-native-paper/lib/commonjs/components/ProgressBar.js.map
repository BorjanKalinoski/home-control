{"version":3,"sources":["ProgressBar.tsx"],"names":["INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","I18nManager","ProgressBar","React","Component","width","timer","Animated","Value","fade","event","visible","props","previousWidth","state","setState","nativeEvent","layout","startAnimation","indeterminate","progress","theme","animation","scale","timing","duration","toValue","useNativeDriver","isInteraction","start","indeterminateAnimation","Platform","OS","setValue","loop","stop","componentDidUpdate","prevProps","stopAnimation","render","color","style","rest","tintColor","colors","primary","trackTintColor","alpha","rgb","string","onLayout","styles","container","backgroundColor","opacity","progressBar","transform","translateX","interpolate","inputRange","outputRange","scaleX","StyleSheet","create","height","overflow","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutChangeEvent,\n  I18nManager,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Progress value (between 0 and 1).\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype State = {\n  width: number;\n  fade: Animated.Value;\n  timer: Animated.Value;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst { isRTL } = I18nManager;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ProgressBar extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    progress: 0,\n  };\n\n  state = {\n    width: 0,\n    timer: new Animated.Value(0),\n    fade: new Animated.Value(0),\n  };\n\n  indeterminateAnimation: Animated.CompositeAnimation | null = null;\n\n  componentDidUpdate(prevProps: Props) {\n    const { visible, progress } = this.props;\n\n    if (progress !== prevProps.progress || visible !== prevProps.visible) {\n      if (visible) {\n        this.startAnimation();\n      } else {\n        this.stopAnimation();\n      }\n    }\n  }\n\n  private onLayout = (event: LayoutChangeEvent) => {\n    const { visible } = this.props;\n    const { width: previousWidth } = this.state;\n\n    this.setState({ width: event.nativeEvent.layout.width }, () => {\n      // Start animation the very first time when previously the width was unclear\n      if (visible && previousWidth === 0) {\n        this.startAnimation();\n      }\n    });\n  };\n\n  private startAnimation = () => {\n    const {\n      indeterminate,\n      progress,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n    const { fade, timer } = this.state;\n\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!this.indeterminateAnimation) {\n        this.indeterminateAnimation = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(this.indeterminateAnimation).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n  };\n\n  private stopAnimation = () => {\n    const { fade } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    // Stop indeterminate animation\n    if (this.indeterminateAnimation) {\n      this.indeterminateAnimation.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  };\n\n  render() {\n    const {\n      color,\n      indeterminate,\n      style,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      progress,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      visible,\n      ...rest\n    } = this.props;\n    const { fade, timer, width } = this.state;\n    const tintColor = color || theme.colors.primary;\n    const trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n\n    return (\n      <View onLayout={this.onLayout} {...rest}>\n        <Animated.View\n          style={[\n            styles.container,\n            { backgroundColor: trackTintColor, opacity: fade },\n            style,\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.progressBar,\n              {\n                backgroundColor: tintColor,\n                width,\n                transform: [\n                  {\n                    translateX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              (isRTL ? 1 : -1) * 0.5 * width,\n                              (isRTL ? 1 : -1) *\n                                0.5 *\n                                INDETERMINATE_MAX_WIDTH *\n                                width,\n                              (isRTL ? -1 : 1) * 0.7 * width,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\n                          }\n                    ),\n                  },\n                  {\n                    // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                    scaleX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              0.0001,\n                              INDETERMINATE_MAX_WIDTH,\n                              0.0001,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [0.0001, 1],\n                          }\n                    ),\n                  },\n                ],\n              },\n            ]}\n          />\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withTheme(ProgressBar);\n"]}