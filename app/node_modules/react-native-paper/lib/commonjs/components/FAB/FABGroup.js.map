{"version":3,"sources":["FABGroup.tsx"],"names":["FABGroup","React","Component","backdrop","Animated","Value","animations","props","onStateChange","open","getDerivedStateFromProps","nextProps","prevState","actions","map","_","i","componentDidUpdate","prevProps","scale","theme","animation","parallel","timing","state","toValue","duration","useNativeDriver","stagger","reverse","start","render","icon","onPress","accessibilityLabel","style","fabStyle","visible","testID","colors","labelColor","dark","text","fade","rgb","string","backdropOpacity","interpolate","inputRange","outputRange","opacities","scales","opacity","styles","container","close","backgroundColor","safeArea","it","item","label","transform","color","surface","toggle","fab","StyleSheet","create","alignItems","absoluteFillObject","justifyContent","marginHorizontal","marginBottom","marginTop","borderRadius","paddingHorizontal","paddingVertical","marginVertical","elevation","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  SafeAreaView,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport FAB from './FAB';\nimport Text from '../Typography/Text';\nimport Card from '../Card/Card';\nimport { withTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Action items to display in the form of a speed dial.\n   * An action item should contain the following properties:\n   * - `icon`: icon to display (required)\n   * - `label`: optional label text\n   * - `accessibilityLabel`: accessibility label for the action, uses label by default if specified\n   * - `color`: custom icon color of the action item\n   * - `style`: pass additional styles for the fab item, for example, `backgroundColor`\n   * - `onPress`: callback that is called when `FAB` is pressed (required)\n   */\n  actions: Array<{\n    icon: IconSource;\n    label?: string;\n    color?: string;\n    accessibilityLabel?: string;\n    style?: StyleProp<ViewStyle>;\n    onPress: () => void;\n    testID?: string;\n  }>;\n  /**\n   * Icon to display for the `FAB`.\n   * You can toggle it based on whether the speed dial is open to display a different icon.\n   */\n  icon: IconSource;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for the `FAB`.\n   */\n  color?: string;\n  /**\n   * Function to execute on pressing the `FAB`.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the speed dial is open.\n   */\n  open: boolean;\n  /**\n   * Callback which is called on opening and closing the speed dial.\n   * The open state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onStateChange: (state: { open: boolean }) => void;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Style for the group. You can use it to pass additional styles if you need.\n   * For example, you can set an additional padding if you have a tab bar at the bottom.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the FAB. It allows to pass the FAB button styles, such as backgroundColor.\n   */\n  fabStyle?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from Group props to FAB.\n   */\n  testID?: string;\n};\n\ntype State = {\n  backdrop: Animated.Value;\n  animations: Animated.Value[];\n};\n\n/**\n * A component to display a stack of FABs with related actions in a speed dial.\n * To render the group above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { FAB, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [state, setState] = React.useState({ open: false });\n *\n *   const onStateChange = ({ open }) => setState({ open });\n *\n *   const { open } = state;\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <FAB.Group\n *           open={open}\n *           icon={open ? 'calendar-today' : 'plus'}\n *           actions={[\n *             { icon: 'plus', onPress: () => console.log('Pressed add') },\n *             {\n *               icon: 'star',\n *               label: 'Star',\n *               onPress: () => console.log('Pressed star'),\n *             },\n *             {\n *               icon: 'email',\n *               label: 'Email',\n *               onPress: () => console.log('Pressed email'),\n *             },\n *             {\n *               icon: 'bell',\n *               label: 'Remind',\n *               onPress: () => console.log('Pressed notifications'),\n *             },\n *           ]}\n *           onStateChange={onStateChange}\n *           onPress={() => {\n *             if (open) {\n *               // do something if the speed dial is open\n *             }\n *           }}\n *         />\n *       </Portal>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass FABGroup extends React.Component<Props, State> {\n  static displayName = 'FAB.Group';\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    return {\n      animations: nextProps.actions.map(\n        (_, i) =>\n          prevState.animations[i] || new Animated.Value(nextProps.open ? 1 : 0)\n      ),\n    };\n  }\n\n  state: State = {\n    backdrop: new Animated.Value(0),\n    animations: [],\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.open === prevProps.open) {\n      return;\n    }\n\n    const { scale } = this.props.theme.animation;\n    if (this.props.open) {\n      Animated.parallel([\n        Animated.timing(this.state.backdrop, {\n          toValue: 1,\n          duration: 250 * scale,\n          useNativeDriver: true,\n        }),\n        Animated.stagger(\n          50 * scale,\n          this.state.animations\n            .map((animation) =>\n              Animated.timing(animation, {\n                toValue: 1,\n                duration: 150 * scale,\n                useNativeDriver: true,\n              })\n            )\n            .reverse()\n        ),\n      ]).start();\n    } else {\n      Animated.parallel([\n        Animated.timing(this.state.backdrop, {\n          toValue: 0,\n          duration: 200 * scale,\n          useNativeDriver: true,\n        }),\n        ...this.state.animations.map((animation) =>\n          Animated.timing(animation, {\n            toValue: 0,\n            duration: 150 * scale,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start();\n    }\n  }\n\n  private close = () => this.props.onStateChange({ open: false });\n\n  private toggle = () => this.props.onStateChange({ open: !this.props.open });\n\n  render() {\n    const {\n      actions,\n      icon,\n      open,\n      onPress,\n      accessibilityLabel,\n      theme,\n      style,\n      fabStyle,\n      visible,\n      testID,\n    } = this.props;\n    const { colors } = theme;\n\n    const labelColor = theme.dark\n      ? colors.text\n      : color(colors.text).fade(0.54).rgb().string();\n    const backdropOpacity = open\n      ? this.state.backdrop.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, 1, 1],\n        })\n      : this.state.backdrop;\n\n    const opacities = this.state.animations;\n    const scales = opacities.map((opacity) =>\n      open\n        ? opacity.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0.8, 1],\n          })\n        : 1\n    );\n\n    return (\n      <View pointerEvents=\"box-none\" style={[styles.container, style]}>\n        <TouchableWithoutFeedback onPress={this.close}>\n          <Animated.View\n            pointerEvents={open ? 'auto' : 'none'}\n            style={[\n              styles.backdrop,\n              {\n                opacity: backdropOpacity,\n                backgroundColor: colors.backdrop,\n              },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n        <SafeAreaView pointerEvents=\"box-none\" style={styles.safeArea}>\n          <View pointerEvents={open ? 'box-none' : 'none'}>\n            {actions.map((it, i) => (\n              <View\n                key={i} // eslint-disable-line react/no-array-index-key\n                style={styles.item}\n                pointerEvents={open ? 'box-none' : 'none'}\n              >\n                {it.label && (\n                  <Card\n                    style={\n                      [\n                        styles.label,\n                        {\n                          transform: [{ scale: scales[i] }],\n                          opacity: opacities[i],\n                        },\n                      ] as StyleProp<ViewStyle>\n                    }\n                    onPress={() => {\n                      it.onPress();\n                      this.close();\n                    }}\n                    accessibilityLabel={\n                      it.accessibilityLabel !== 'undefined'\n                        ? it.accessibilityLabel\n                        : it.label\n                    }\n                    accessibilityTraits=\"button\"\n                    accessibilityComponentType=\"button\"\n                    accessibilityRole=\"button\"\n                  >\n                    <Text style={{ color: labelColor }}>{it.label}</Text>\n                  </Card>\n                )}\n                <FAB\n                  small\n                  icon={it.icon}\n                  color={it.color}\n                  style={\n                    [\n                      {\n                        transform: [{ scale: scales[i] }],\n                        opacity: opacities[i],\n                        backgroundColor: theme.colors.surface,\n                      },\n                      it.style,\n                    ] as StyleProp<ViewStyle>\n                  }\n                  onPress={() => {\n                    it.onPress();\n                    this.close();\n                  }}\n                  accessibilityLabel={\n                    typeof it.accessibilityLabel !== 'undefined'\n                      ? it.accessibilityLabel\n                      : it.label\n                  }\n                  accessibilityTraits=\"button\"\n                  accessibilityComponentType=\"button\"\n                  accessibilityRole=\"button\"\n                  testID={it.testID}\n                  visible={open}\n                />\n              </View>\n            ))}\n          </View>\n          <FAB\n            onPress={() => {\n              onPress?.();\n              this.toggle();\n            }}\n            icon={icon}\n            color={this.props.color}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            style={[styles.fab, fabStyle]}\n            visible={visible}\n            testID={testID}\n          />\n        </SafeAreaView>\n      </View>\n    );\n  }\n}\n\nexport default withTheme(FABGroup);\n\n// @component-docs ignore-next-line\nexport { FABGroup };\n\nconst styles = StyleSheet.create({\n  safeArea: {\n    alignItems: 'flex-end',\n  },\n  container: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'flex-end',\n  },\n  fab: {\n    marginHorizontal: 16,\n    marginBottom: 16,\n    marginTop: 0,\n  },\n  backdrop: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  label: {\n    borderRadius: 5,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    marginVertical: 8,\n    marginHorizontal: 16,\n    elevation: 2,\n  },\n  item: {\n    marginHorizontal: 24,\n    marginBottom: 16,\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n  },\n});\n"]}