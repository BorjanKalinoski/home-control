{"version":3,"sources":["Snackbar.tsx"],"names":["DURATION_SHORT","DURATION_MEDIUM","DURATION_LONG","Snackbar","visible","action","duration","onDismiss","children","wrapperStyle","style","theme","rest","current","opacity","React","useRef","Animated","Value","hidden","setHidden","useState","hideTimeout","undefined","scale","animation","useEffect","clearTimeout","useLayoutEffect","timing","toValue","useNativeDriver","start","finished","isInfinity","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","setTimeout","colors","roundness","styles","wrapper","container","borderRadius","transform","interpolate","inputRange","outputRange","backgroundColor","onSurface","content","marginRight","color","surface","accessibilityLabel","onPress","button","accent","label","StyleSheet","create","position","bottom","width","elevation","flexDirection","justifyContent","alignItems","margin","marginLeft","marginVertical","flexWrap","flex","marginHorizontal"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  SafeAreaView,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n} from 'react-native';\n\nimport Button from './Button';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Whether the Snackbar is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Label and press callback for the action button. It should contain the following properties:\n   * - `label` - Label of the action button\n   * - `onPress` - Callback that is called when action button is pressed.\n   */\n  action?: {\n    label: string;\n    accessibilityLabel?: string;\n    onPress: () => void;\n  };\n  /**\n   * The duration for which the Snackbar is shown.\n   */\n  duration?: number;\n  /**\n   * Callback called when Snackbar is dismissed. The `visible` prop needs to be updated when this is called.\n   */\n  onDismiss: () => void;\n  /**\n   * Text content of the Snackbar.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the wrapper of the snackbar\n   */\n  wrapperStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DURATION_SHORT = 4000;\nconst DURATION_MEDIUM = 7000;\nconst DURATION_LONG = 10000;\n\n/**\n * Snackbars provide brief feedback about an operation through a message at the bottom of the screen.\n * Snackbar by default uses `onSurface` color from theme.\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/snackbar.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, StyleSheet } from 'react-native';\n * import { Button, Snackbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const onToggleSnackBar = () => setVisible(!visible);\n *\n *   const onDismissSnackBar = () => setVisible(false);\n *\n *   return (\n *     <View style={styles.container}>\n *       <Button onPress={onToggleSnackBar}>{visible ? 'Hide' : 'Show'}</Button>\n *       <Snackbar\n *         visible={visible}\n *         onDismiss={onDismissSnackBar}\n *         action={{\n *           label: 'Undo',\n *           onPress: () => {\n *             // Do something\n *           },\n *         }}>\n *         Hey there! I'm a Snackbar.\n *       </Snackbar>\n *     </View>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'space-between',\n *   },\n * });\n *\n * export default MyComponent;\n * ```\n */\nconst Snackbar = ({\n  visible,\n  action,\n  duration = DURATION_MEDIUM,\n  onDismiss,\n  children,\n  wrapperStyle,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(0.0)\n  );\n  const [hidden, setHidden] = React.useState<boolean>(!visible);\n\n  const hideTimeout = React.useRef<NodeJS.Timeout | undefined>(undefined);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    return () => {\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n    };\n  }, []);\n\n  React.useLayoutEffect(() => {\n    if (visible) {\n      // show\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n      setHidden(false);\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start(({ finished }) => {\n        if (finished) {\n          const isInfinity =\n            duration === Number.POSITIVE_INFINITY ||\n            duration === Number.NEGATIVE_INFINITY;\n\n          if (finished && !isInfinity) {\n            hideTimeout.current = setTimeout(onDismiss, duration);\n          }\n        }\n      });\n    } else {\n      // hide\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: 100 * scale,\n        useNativeDriver: true,\n      }).start(({ finished }) => {\n        if (finished) setHidden(true);\n      });\n    }\n  }, [visible, duration, opacity, scale, onDismiss]);\n\n  const { colors, roundness } = theme;\n\n  if (hidden) return null;\n\n  return (\n    <SafeAreaView\n      pointerEvents=\"box-none\"\n      style={[styles.wrapper, wrapperStyle]}\n    >\n      <Surface\n        pointerEvents=\"box-none\"\n        accessibilityLiveRegion=\"polite\"\n        style={\n          [\n            styles.container,\n            {\n              borderRadius: roundness,\n              opacity: opacity,\n              transform: [\n                {\n                  scale: visible\n                    ? opacity.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [0.9, 1],\n                      })\n                    : 1,\n                },\n              ],\n            },\n            { backgroundColor: colors.onSurface },\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...rest}\n      >\n        <Text\n          style={[\n            styles.content,\n            { marginRight: action ? 0 : 16, color: colors.surface },\n          ]}\n        >\n          {children}\n        </Text>\n        {action ? (\n          <Button\n            accessibilityLabel={action.accessibilityLabel}\n            onPress={() => {\n              action.onPress();\n              onDismiss();\n            }}\n            style={styles.button}\n            color={colors.accent}\n            compact\n            mode=\"text\"\n          >\n            {action.label}\n          </Button>\n        ) : null}\n      </Surface>\n    </SafeAreaView>\n  );\n};\n\n/**\n * Show the Snackbar for a short duration.\n */\nSnackbar.DURATION_SHORT = DURATION_SHORT;\n\n/**\n * Show the Snackbar for a medium duration.\n */\nSnackbar.DURATION_MEDIUM = DURATION_MEDIUM;\n\n/**\n * Show the Snackbar for a long duration.\n */\nSnackbar.DURATION_LONG = DURATION_LONG;\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n  },\n  container: {\n    elevation: 6,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    margin: 8,\n    borderRadius: 4,\n  },\n  content: {\n    marginLeft: 16,\n    marginVertical: 14,\n    flexWrap: 'wrap',\n    flex: 1,\n  },\n  button: {\n    marginHorizontal: 8,\n    marginVertical: 6,\n  },\n});\n\nexport default withTheme(Snackbar);\n"]}