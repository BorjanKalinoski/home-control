{"version":3,"sources":["MaterialCommunityIcon.tsx"],"names":["MaterialCommunityIcons","require","default","e","global","__expo","Icon","isErrorLogged","name","color","size","rest","test","message","console","error","warn","styles","icon","fontSize","accessibilityProps","Platform","OS","role","focusable","accessibilityElementsHidden","importantForAccessibility","defaultIcon","direction","allowFontScaling","transform","scaleX","StyleSheet","create","backgroundColor"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;AAUA,IAAIA,sBAAJ;;AAEA,IAAI;AACF;AACAA,EAAAA,sBAAsB,GAAGC,OAAO,CAAC,kDAAD,CAAP,CACtBC,OADH;AAED,CAJD,CAIE,OAAOC,CAAP,EAAU;AACV,OACE;AACAC,EAAAA,MAAM,CAACC,MAAP,IACA;AACAD,EAAAA,MAAM,CAACC,MAAP,CAAcC,IAFd,IAGA;AACAF,EAAAA,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBN,sBANrB,EAOE;AACA;AACA;AACA;AACAA,IAAAA,sBAAsB,GAAGI,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBN,sBAA5C;AACD,GAZD,MAYO;AACL,QAAIO,aAAa,GAAG,KAApB,CADK,CAGL;AACA;;AACAP,IAAAA,sBAAsB,GAAG,UAAoC;AAAA,UAAnC;AAAEQ,QAAAA,IAAF;AAAQC,QAAAA,KAAR;AAAeC,QAAAA;AAAf,OAAmC;AAAA,UAAXC,IAAW;;AAC3D;AACA,UAAI,CAACJ,aAAL,EAAoB;AAClB,YACE,CAAC,8DAA8DK,IAA9D,CACCT,CAAC,CAACU,OADH,CADH,EAIE;AACAC,UAAAA,OAAO,CAACC,KAAR,CAAcZ,CAAd;AACD;;AAEDW,QAAAA,OAAO,CAACE,IAAR,kCAC4BR,IAD5B;AAKAD,QAAAA,aAAa,GAAG,IAAhB;AACD;;AAED,0BACE,oBAAC,iBAAD,eACMI,IADN;AAEE,QAAA,KAAK,EAAE,CAACM,MAAM,CAACC,IAAR,EAAc;AAAET,UAAAA,KAAF;AAASU,UAAAA,QAAQ,EAAET;AAAnB,SAAd,CAFT,CAGE;AAHF;AAIE,QAAA,aAAa,EAAC;AAJhB,mBADF;AAUD,KA7BD;AA8BD;AACF;;AAEM,MAAMU,kBAAkB,GAC7BC,sBAASC,EAAT,KAAgB,KAAhB,GACI;AACEC,EAAAA,IAAI,EAAE,KADR;AAEEC,EAAAA,SAAS,EAAE;AAFb,CADJ,GAKI;AACEC,EAAAA,2BAA2B,EAAE,IAD/B;AAEEC,EAAAA,yBAAyB,EAAE;AAF7B,CANC;;;AAWP,MAAMC,WAAW,GAAG,CAAC;AACnBnB,EAAAA,IADmB;AAEnBC,EAAAA,KAFmB;AAGnBC,EAAAA,IAHmB;AAInBkB,EAAAA,SAJmB;AAKnBC,EAAAA;AALmB,CAAD,kBAOlB,oBAAC,sBAAD;AACE,EAAA,gBAAgB,EAAEA,gBADpB;AAEE,EAAA,IAAI,EAAErB,IAFR;AAGE,EAAA,KAAK,EAAEC,KAHT;AAIE,EAAA,IAAI,EAAEC,IAJR;AAKE,EAAA,KAAK,EAAE,CACL;AACEoB,IAAAA,SAAS,EAAE,CAAC;AAAEC,MAAAA,MAAM,EAAEH,SAAS,KAAK,KAAd,GAAsB,CAAC,CAAvB,GAA2B;AAArC,KAAD;AADb,GADK,EAILX,MAAM,CAACC,IAJF,CALT;AAWE,EAAA,aAAa,EAAC;AAXhB,GAYME,kBAZN,EAPF;;AAuBA,MAAMH,MAAM,GAAGe,wBAAWC,MAAX,CAAkB;AAC/Bf,EAAAA,IAAI,EAAE;AACJgB,IAAAA,eAAe,EAAE;AADb;AADyB,CAAlB,CAAf;;eAMeP,W","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Text, Platform } from 'react-native';\n\nexport type IconProps = {\n  name: string;\n  color: string;\n  size: number;\n  direction: 'rtl' | 'ltr';\n  allowFontScaling?: boolean;\n};\n\nlet MaterialCommunityIcons: any;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons')\n    .default;\n} catch (e) {\n  if (\n    // @ts-ignore\n    global.__expo &&\n    // @ts-ignore\n    global.__expo.Icon &&\n    // @ts-ignore\n    global.__expo.Icon.MaterialCommunityIcons\n  ) {\n    // Snack doesn't properly bundle vector icons from subpath\n    // Use icons from the __expo global if available\n    // @ts-ignore\n    MaterialCommunityIcons = global.__expo.Icon.MaterialCommunityIcons;\n  } else {\n    let isErrorLogged = false;\n\n    // Fallback component for icons\n    // @ts-ignore\n    MaterialCommunityIcons = ({ name, color, size, ...rest }) => {\n      /* eslint-disable no-console */\n      if (!isErrorLogged) {\n        if (\n          !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n            e.message\n          )\n        ) {\n          console.error(e);\n        }\n\n        console.warn(\n          `Tried to use the icon '${name}' in a component from 'react-native-paper', but 'react-native-vector-icons' could not be loaded.`,\n          `To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.`\n        );\n\n        isErrorLogged = true;\n      }\n\n      return (\n        <Text\n          {...rest}\n          style={[styles.icon, { color, fontSize: size }]}\n          // @ts-ignore\n          pointerEvents=\"none\"\n        >\n          â–¡\n        </Text>\n      );\n    };\n  }\n}\n\nexport const accessibilityProps =\n  Platform.OS === 'web'\n    ? {\n        role: 'img',\n        focusable: false,\n      }\n    : {\n        accessibilityElementsHidden: true,\n        importantForAccessibility: 'no-hide-descendants' as 'no-hide-descendants',\n      };\n\nconst defaultIcon = ({\n  name,\n  color,\n  size,\n  direction,\n  allowFontScaling,\n}: IconProps) => (\n  <MaterialCommunityIcons\n    allowFontScaling={allowFontScaling}\n    name={name}\n    color={color}\n    size={size}\n    style={[\n      {\n        transform: [{ scaleX: direction === 'rtl' ? -1 : 1 }],\n      },\n      styles.icon,\n    ]}\n    pointerEvents=\"none\"\n    {...accessibilityProps}\n  />\n);\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default defaultIcon;\n"]}