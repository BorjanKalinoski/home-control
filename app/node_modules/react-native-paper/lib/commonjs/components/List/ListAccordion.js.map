{"version":3,"sources":["ListAccordion.tsx"],"names":["ListAccordion","React","Component","expanded","props","onPress","undefined","setState","state","render","left","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","testID","titleColor","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","groupContext","Error","expandedId","handlePress","onAccordionPress","styles","container","row","color","primary","item","content","multiline","I18nManager","isRTL","Children","map","child","isValidElement","right","cloneElement","StyleSheet","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport {\n  ListAccordionGroupContext,\n  ListAccordionGroupContextType,\n} from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass ListAccordion extends React.Component<Props, State> {\n  static displayName = 'List.Accordion';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  state = {\n    expanded: this.props.expanded || false,\n  };\n\n  private handlePress = () => {\n    this.props.onPress && this.props.onPress();\n\n    if (this.props.expanded === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      this.setState((state) => ({\n        expanded: !state.expanded,\n      }));\n    }\n  };\n\n  render() {\n    const {\n      left,\n      title,\n      description,\n      children,\n      theme,\n      titleStyle,\n      descriptionStyle,\n      titleNumberOfLines,\n      descriptionNumberOfLines,\n      style,\n      id,\n      testID,\n    } = this.props;\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    const expandedInternal =\n      this.props.expanded !== undefined\n        ? this.props.expanded\n        : this.state.expanded;\n\n    return (\n      <ListAccordionGroupContext.Consumer>\n        {(groupContext: ListAccordionGroupContextType) => {\n          if (groupContext !== null && !id) {\n            throw new Error(\n              'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n            );\n          }\n          const expanded = groupContext\n            ? groupContext.expandedId === id\n            : expandedInternal;\n          const handlePress =\n            groupContext && id !== undefined\n              ? () => groupContext.onAccordionPress(id)\n              : this.handlePress;\n          return (\n            <View>\n              <TouchableRipple\n                style={[styles.container, style]}\n                onPress={handlePress}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n                accessibilityRole=\"button\"\n                testID={testID}\n              >\n                <View style={styles.row} pointerEvents=\"none\">\n                  {left\n                    ? left({\n                        color: expanded\n                          ? theme.colors.primary\n                          : descriptionColor,\n                      })\n                    : null}\n                  <View style={[styles.item, styles.content]}>\n                    <Text\n                      numberOfLines={titleNumberOfLines}\n                      style={[\n                        styles.title,\n                        {\n                          color: expanded ? theme.colors.primary : titleColor,\n                        },\n                        titleStyle,\n                      ]}\n                    >\n                      {title}\n                    </Text>\n                    {description && (\n                      <Text\n                        numberOfLines={descriptionNumberOfLines}\n                        style={[\n                          styles.description,\n                          {\n                            color: descriptionColor,\n                          },\n                          descriptionStyle,\n                        ]}\n                      >\n                        {description}\n                      </Text>\n                    )}\n                  </View>\n                  <View\n                    style={[\n                      styles.item,\n                      description ? styles.multiline : undefined,\n                    ]}\n                  >\n                    <MaterialCommunityIcon\n                      name={expanded ? 'chevron-up' : 'chevron-down'}\n                      color={titleColor}\n                      size={24}\n                      direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                    />\n                  </View>\n                </View>\n              </TouchableRipple>\n              {expanded\n                ? React.Children.map(children, (child) => {\n                    if (\n                      left &&\n                      React.isValidElement(child) &&\n                      !child.props.left &&\n                      !child.props.right\n                    ) {\n                      return React.cloneElement(child, {\n                        style: [styles.child, child.props.style],\n                      });\n                    }\n\n                    return child;\n                  })\n                : null}\n            </View>\n          );\n        }}\n      </ListAccordionGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]}