{"version":3,"sources":["ListItem.tsx"],"names":["ListItem","React","Component","renderDescription","descriptionColor","description","descriptionEllipsizeMode","descriptionStyle","descriptionNumberOfLines","props","ellipsizeMode","color","fontSize","styles","render","left","right","title","onPress","theme","style","titleStyle","titleNumberOfLines","titleEllipsizeMode","rest","titleColor","colors","text","alpha","rgb","string","container","row","iconMarginLeft","marginVerticalNone","item","content","iconMarginRight","StyleSheet","create","padding","flexDirection","marginVertical","marginLeft","marginRight","paddingLeft","flex","justifyContent"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAQA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAiFA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAMA,QAAN,SAAuBC,KAAK,CAACC,SAA7B,CAA8C;AAQ5CC,EAAAA,iBAAiB,CACfC,gBADe,EAEfC,WAFe,EAGf;AACA,UAAM;AACJC,MAAAA,wBADI;AAEJC,MAAAA,gBAFI;AAGJC,MAAAA;AAHI,QAIF,KAAKC,KAJT;AAMA,WAAO,OAAOJ,WAAP,KAAuB,UAAvB,GACLA,WAAW,CAAC;AACVK,MAAAA,aAAa,EAAEJ,wBADL;AAEVK,MAAAA,KAAK,EAAEP,gBAFG;AAGVQ,MAAAA,QAAQ,EAAEC,MAAM,CAACR,WAAP,CAAmBO;AAHnB,KAAD,CADN,gBAOL,oBAAC,aAAD;AACE,MAAA,aAAa,EAAEJ,wBADjB;AAEE,MAAA,aAAa,EAAEF,wBAFjB;AAGE,MAAA,KAAK,EAAE,CACLO,MAAM,CAACR,WADF,EAEL;AAAEM,QAAAA,KAAK,EAAEP;AAAT,OAFK,EAGLG,gBAHK;AAHT,OASGF,WATH,CAPF;AAmBD;;AAEDS,EAAAA,MAAM,GAAG;AACP,wBAYI,KAAKL,KAZT;AAAA,UAAM;AACJM,MAAAA,IADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,KAHI;AAIJZ,MAAAA,WAJI;AAKJa,MAAAA,OALI;AAMJC,MAAAA,KANI;AAOJC,MAAAA,KAPI;AAQJC,MAAAA,UARI;AASJC,MAAAA,kBATI;AAUJC,MAAAA;AAVI,KAAN;AAAA,UAWKC,IAXL;;AAaA,UAAMC,UAAU,GAAG,oBAAMN,KAAK,CAACO,MAAN,CAAaC,IAAnB,EAAyBC,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAAnB;AACA,UAAM1B,gBAAgB,GAAG,oBAAMe,KAAK,CAACO,MAAN,CAAaC,IAAnB,EACtBC,KADsB,CAChB,IADgB,EAEtBC,GAFsB,GAGtBC,MAHsB,EAAzB;AAKA,wBACE,oBAAC,wBAAD,eACMN,IADN;AAEE,MAAA,KAAK,EAAE,CAACX,MAAM,CAACkB,SAAR,EAAmBX,KAAnB,CAFT;AAGE,MAAA,OAAO,EAAEF;AAHX,qBAKE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAEL,MAAM,CAACmB;AAApB,OACGjB,IAAI,GACDA,IAAI,CAAC;AACHJ,MAAAA,KAAK,EAAEP,gBADJ;AAEHgB,MAAAA,KAAK,EAAEf,WAAW,GACdQ,MAAM,CAACoB,cADO,mCAGTpB,MAAM,CAACoB,cAHE,GAITpB,MAAM,CAACqB,kBAJE;AAFf,KAAD,CADH,GAUD,IAXN,eAYE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE,CAACrB,MAAM,CAACsB,IAAR,EAActB,MAAM,CAACuB,OAArB;AAAb,oBACE,oBAAC,aAAD;AACE,MAAA,aAAa,EAAEb,kBADjB;AAEE,MAAA,aAAa,EAAED,kBAFjB;AAGE,MAAA,KAAK,EAAE,CAACT,MAAM,CAACI,KAAR,EAAe;AAAEN,QAAAA,KAAK,EAAEc;AAAT,OAAf,EAAsCJ,UAAtC;AAHT,OAKGJ,KALH,CADF,EAQGZ,WAAW,GACR,KAAKF,iBAAL,CAAuBC,gBAAvB,EAAyCC,WAAzC,CADQ,GAER,IAVN,CAZF,EAwBGW,KAAK,GACFA,KAAK,CAAC;AACJL,MAAAA,KAAK,EAAEP,gBADH;AAEJgB,MAAAA,KAAK,EAAEf,WAAW,GACdQ,MAAM,CAACwB,eADO,mCAGTxB,MAAM,CAACwB,eAHE,GAITxB,MAAM,CAACqB,kBAJE;AAFd,KAAD,CADH,GAUF,IAlCN,CALF,CADF;AA4CD;;AAvG2C;;gBAAxClC,Q,iBACiB,W;;gBADjBA,Q,kBAGkC;AACpCsB,EAAAA,kBAAkB,EAAE,CADgB;AAEpCd,EAAAA,wBAAwB,EAAE;AAFU,C;;AAuGxC,MAAMK,MAAM,GAAGyB,wBAAWC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,OAAO,EAAE;AADA,GADoB;AAI/BR,EAAAA,GAAG,EAAE;AACHS,IAAAA,aAAa,EAAE;AADZ,GAJ0B;AAO/BxB,EAAAA,KAAK,EAAE;AACLL,IAAAA,QAAQ,EAAE;AADL,GAPwB;AAU/BP,EAAAA,WAAW,EAAE;AACXO,IAAAA,QAAQ,EAAE;AADC,GAVkB;AAa/BsB,EAAAA,kBAAkB,EAAE;AAAEQ,IAAAA,cAAc,EAAE;AAAlB,GAbW;AAc/BT,EAAAA,cAAc,EAAE;AAAEU,IAAAA,UAAU,EAAE,CAAd;AAAiBC,IAAAA,WAAW,EAAE;AAA9B,GAde;AAe/BP,EAAAA,eAAe,EAAE;AAAEO,IAAAA,WAAW,EAAE;AAAf,GAfc;AAgB/BT,EAAAA,IAAI,EAAE;AACJO,IAAAA,cAAc,EAAE,CADZ;AAEJG,IAAAA,WAAW,EAAE;AAFT,GAhByB;AAoB/BT,EAAAA,OAAO,EAAE;AACPU,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,cAAc,EAAE;AAFT;AApBsB,CAAlB,CAAf;;eA0Be,wBAAU/C,QAAV,C","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ListItem extends React.Component<Props> {\n  static displayName = 'List.Item';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  renderDescription(\n    descriptionColor: string,\n    description?: Description | null\n  ) {\n    const {\n      descriptionEllipsizeMode,\n      descriptionStyle,\n      descriptionNumberOfLines,\n    } = this.props;\n\n    return typeof description === 'function' ? (\n      description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  }\n\n  render() {\n    const {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      titleNumberOfLines,\n      titleEllipsizeMode,\n      ...rest\n    } = this.props;\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, style]}\n        onPress={onPress}\n      >\n        <View style={styles.row}>\n          {left\n            ? left({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginLeft\n                  : {\n                      ...styles.iconMarginLeft,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              ellipsizeMode={titleEllipsizeMode}\n              numberOfLines={titleNumberOfLines}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n            {description\n              ? this.renderDescription(descriptionColor, description)\n              : null}\n          </View>\n          {right\n            ? right({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginRight\n                  : {\n                      ...styles.iconMarginRight,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]}