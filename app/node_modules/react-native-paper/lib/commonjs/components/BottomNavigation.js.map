{"version":3,"sources":["BottomNavigation.tsx"],"names":["MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","FAR_FAR_AWAY","Touchable","route","_0","style","children","borderless","centered","rippleColor","rest","TouchableRipple","supported","SceneComponent","React","PureComponent","render","props","component","createElement","BottomNavigation","Component","SceneMap","scenes","jumpTo","key","getDerivedStateFromProps","nextProps","prevState","index","routes","navigationState","tabs","map","_","i","Animated","Value","offsets","nextState","current","Object","assign","previous","loaded","includes","constructor","scale","theme","animation","setState","keyboard","timing","state","visible","toValue","duration","useNativeDriver","start","shifting","isShifting","ripple","setValue","parallel","finished","tab","forEach","offset","e","layout","height","width","nativeEvent","measured","onTabPress","onIndexChange","event","defaultPrevented","preventDefault","findIndex","length","touch","componentDidMount","animateToCurrentIndex","Platform","OS","Keyboard","addListener","handleKeyboardShow","handleKeyboardHide","componentDidUpdate","prevProps","componentWillUnmount","removeListener","renderScene","renderIcon","renderLabel","renderTouchable","getLabelText","title","getBadge","badge","getColor","color","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","sceneAnimationEnabled","colors","dark","isDarkTheme","mode","backgroundColor","customBackground","elevation","StyleSheet","flatten","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","white","black","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","tabWidth","rippleSize","styles","container","content","background","focused","opacity","top","absoluteFill","bar","transform","translateY","position","handleLayout","barContent","bottom","items","maxWidth","left","borderRadius","active","activeOpacity","inactiveOpacity","onPress","handleTabPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","item","iconContainer","iconWrapper","icon","badgeContainer","right","String","labelContainer","labelWrapper","label","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","marginHorizontal","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-multi-comp */\n\nimport * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  Keyboard,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport overlay from '../styles/overlay';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Badge from './Badge';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Text from './Typography/Text';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab appears wider and the inactive tabs won't have a label.\n   * By default, this is `true` when you have more than 3 tabs.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number reprsenting the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Style for the bottom navigation bar.\n   * You can set a bottom padding here if you have a translucent navigation bar on Android:\n   *\n   * ```js\n   * barStyle={{ paddingBottom: 48 }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype State = {\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  visible: Animated.Value;\n  /**\n   * Active state of individual tab items, active state is 1 and inactve state is 0.\n   */\n  tabs: Animated.Value[];\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecesary re-renders.\n   */\n  offsets: Animated.Value[];\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * Use don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  index: Animated.Value;\n  /**\n   * Animation for the touch, used to determine it's scale and opacity.\n   */\n  touch: Animated.Value;\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  ripple: Animated.Value;\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  layout: { height: number; width: number; measured: boolean };\n  /**\n   * Currently active index. Used only for getDerivedStateFromProps.\n   */\n  current: number;\n  /**\n   * Previously active index. Used to determine the position of the ripple.\n   */\n  previous: number;\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  loaded: number[];\n  /**\n   * Trak whether the keyboard is visible to show and hide the navigation bar.\n   */\n  keyboard: boolean;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst FAR_FAR_AWAY = 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nclass SceneComponent extends React.PureComponent<any> {\n  render() {\n    const { component, ...rest } = this.props;\n    return React.createElement(component, rest);\n  }\n}\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tab-navigator](https://github.com/react-navigation/react-navigation-material-bottom-tab-navigator).\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass BottomNavigation extends React.Component<Props, State> {\n  /**\n   * Function which takes a map of route keys to components.\n   * Pure components are used to minmize re-rendering of the pages.\n   * This drastically improves the animation performance.\n   */\n  static SceneMap(scenes: {\n    [key: string]: React.ComponentType<{\n      route: Route;\n      jumpTo: (key: string) => void;\n    }>;\n  }) {\n    return ({\n      route,\n      jumpTo,\n    }: {\n      route: Route;\n      jumpTo: (key: string) => void;\n    }) => (\n      <SceneComponent\n        key={route.key}\n        component={scenes[route.key ? route.key : '']}\n        route={route}\n        jumpTo={jumpTo}\n      />\n    );\n  }\n\n  static defaultProps = {\n    labeled: true,\n    keyboardHidesNavigationBar: true,\n    sceneAnimationEnabled: false,\n  };\n\n  static getDerivedStateFromProps(nextProps: any, prevState: State) {\n    const { index, routes } = nextProps.navigationState;\n\n    // Re-create animated values if routes have been added/removed\n    // Preserve previous animated values if they exist, so we don't break animations\n    const tabs = routes.map(\n      // focused === 1, unfocused === 0\n      (_: any, i: number) =>\n        prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0)\n    );\n    const offsets = routes.map(\n      // offscreen === 1, normal === 0\n      (_: any, i: number) =>\n        prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1)\n    );\n\n    const nextState = {\n      tabs,\n      offsets,\n    };\n\n    if (index !== prevState.current) {\n      /* $FlowFixMe */\n      Object.assign(nextState, {\n        // Store the current index in state so that we can later check if the index has changed\n        current: index,\n        previous: prevState.current,\n        // Set the current tab to be loaded if it was not loaded before\n        loaded: prevState.loaded.includes(index)\n          ? prevState.loaded\n          : [...prevState.loaded, index],\n      });\n    }\n\n    return nextState;\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { index } = this.props.navigationState;\n\n    this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: { height: 0, width: 0, measured: false },\n      current: index,\n      previous: 0,\n      loaded: [index],\n      keyboard: false,\n    };\n  }\n\n  componentDidMount() {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    this.animateToCurrentIndex();\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', this.handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', this.handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', this.handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', this.handleKeyboardHide);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.navigationState.index === this.props.navigationState.index) {\n      return;\n    }\n\n    // Reset offsets of previous and current tabs before animation\n    this.state.offsets.forEach((offset, i) => {\n      if (\n        i === this.props.navigationState.index ||\n        i === prevProps.navigationState.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    this.animateToCurrentIndex();\n  }\n\n  componentWillUnmount() {\n    if (Platform.OS === 'ios') {\n      Keyboard.removeListener('keyboardWillShow', this.handleKeyboardShow);\n      Keyboard.removeListener('keyboardWillHide', this.handleKeyboardHide);\n    } else {\n      Keyboard.removeListener('keyboardDidShow', this.handleKeyboardShow);\n      Keyboard.removeListener('keyboardDidHide', this.handleKeyboardHide);\n    }\n  }\n\n  private handleKeyboardShow = () => {\n    const { scale } = this.props.theme.animation;\n    this.setState({ keyboard: true }, () =>\n      Animated.timing(this.state.visible, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start()\n    );\n  };\n\n  private handleKeyboardHide = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.visible, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      this.setState({ keyboard: false });\n    });\n  };\n\n  private animateToCurrentIndex = () => {\n    const shifting = this.isShifting();\n    const {\n      navigationState,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n    const { routes, index } = navigationState;\n\n    // Reset the ripple to avoid glitch if it's currently animating\n    this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n    Animated.parallel([\n      Animated.timing(this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 * scale : 0,\n        useNativeDriver: true,\n      }),\n      ...routes.map((_, i) =>\n        Animated.timing(this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 * scale : 0,\n          useNativeDriver: true,\n        })\n      ),\n    ]).start(({ finished }) => {\n      // Workaround a bug in native animations where this is reset after first animation\n      this.state.tabs.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n      // Update the index to change bar's bacground color and then hide the ripple\n      this.state.index.setValue(index);\n      this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      if (finished) {\n        // Position all inactive screens offscreen to save memory usage\n        // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n        this.state.offsets.forEach((offset, i) => {\n          if (i === index) {\n            offset.setValue(0);\n          } else {\n            offset.setValue(1);\n          }\n        });\n      }\n    });\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { layout } = this.state;\n    const { height, width } = e.nativeEvent.layout;\n\n    if (height === layout.height && width === layout.width) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n        measured: true,\n      },\n    });\n  };\n\n  private handleTabPress = (index: number) => {\n    const { navigationState, onTabPress, onIndexChange } = this.props;\n\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  private jumpTo = (key: string) => {\n    const index = this.props.navigationState.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    this.props.onIndexChange(index);\n  };\n\n  private isShifting = () =>\n    typeof this.props.shifting === 'boolean'\n      ? this.props.shifting\n      : this.props.navigationState.routes.length > 3;\n\n  render() {\n    const {\n      navigationState,\n      renderScene,\n      renderIcon,\n      renderLabel,\n      renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n      getLabelText = ({ route }: { route: Route }) => route.title,\n      getBadge = ({ route }: { route: Route }) => route.badge,\n      getColor = ({ route }: { route: Route }) => route.color,\n      getAccessibilityLabel = ({ route }: { route: Route }) =>\n        route.accessibilityLabel,\n      getTestID = ({ route }: { route: Route }) => route.testID,\n      activeColor,\n      inactiveColor,\n      keyboardHidesNavigationBar,\n      barStyle,\n      labeled,\n      style,\n      theme,\n      sceneAnimationEnabled,\n    } = this.props;\n\n    const {\n      layout,\n      loaded,\n      index,\n      visible,\n      ripple,\n      keyboard,\n      tabs,\n      offsets,\n    } = this.state;\n    const { routes } = navigationState;\n    const { colors, dark: isDarkTheme, mode } = theme;\n\n    const shifting = this.isShifting();\n\n    const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n      StyleSheet.flatten(barStyle) || {};\n\n    const approxBackgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n\n    const backgroundColor = shifting\n      ? index.interpolate({\n          inputRange: routes.map((_, i) => i),\n          //@ts-ignore\n          outputRange: routes.map(\n            (route) => getColor({ route }) || approxBackgroundColor\n          ),\n        })\n      : approxBackgroundColor;\n\n    const isDark = !color(approxBackgroundColor).isLight();\n\n    const textColor = isDark ? white : black;\n    const activeTintColor =\n      typeof activeColor !== 'undefined' ? activeColor : textColor;\n    const inactiveTintColor =\n      typeof inactiveColor !== 'undefined'\n        ? inactiveColor\n        : color(textColor).alpha(0.5).rgb().string();\n\n    const touchColor = color(activeColor || activeTintColor)\n      .alpha(0.12)\n      .rgb()\n      .string();\n\n    const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n    const maxTabBarWidth = maxTabWidth * routes.length;\n\n    const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n    const tabWidth = tabBarWidth / routes.length;\n\n    const rippleSize = layout.width / 4;\n\n    return (\n      <View style={[styles.container, style]}>\n        <View style={[styles.content, { backgroundColor: colors.background }]}>\n          {routes.map((route, index) => {\n            if (!loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n            const focused = navigationState.index === index;\n\n            const opacity = sceneAnimationEnabled\n              ? tabs[index]\n              : focused\n              ? 1\n              : 0;\n\n            const top = offsets[index].interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, FAR_FAR_AWAY],\n            });\n\n            return (\n              <Animated.View\n                key={route.key}\n                pointerEvents={focused ? 'auto' : 'none'}\n                accessibilityElementsHidden={!focused}\n                importantForAccessibility={\n                  focused ? 'auto' : 'no-hide-descendants'\n                }\n                style={[StyleSheet.absoluteFill, { opacity }]}\n                collapsable={false}\n                removeClippedSubviews={\n                  // On iOS, set removeClippedSubviews to true only when not focused\n                  // This is an workaround for a bug where the clipped view never re-appears\n                  Platform.OS === 'ios' ? navigationState.index !== index : true\n                }\n              >\n                <Animated.View style={[styles.content, { top }]}>\n                  {renderScene({\n                    route,\n                    jumpTo: this.jumpTo,\n                  })}\n                </Animated.View>\n              </Animated.View>\n            );\n          })}\n        </View>\n        <Surface\n          style={\n            [\n              styles.bar,\n              keyboardHidesNavigationBar\n                ? {\n                    // When the keyboard is shown, slide down the navigation bar\n                    transform: [\n                      {\n                        translateY: visible.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [layout.height, 0],\n                        }),\n                      },\n                    ],\n                    // Absolutely position the navigation bar so that the content is below it\n                    // This is needed to avoid gap at bottom when the navigation bar is hidden\n                    position: keyboard ? 'absolute' : null,\n                  }\n                : null,\n              barStyle,\n            ] as StyleProp<ViewStyle>\n          }\n          pointerEvents={\n            layout.measured\n              ? keyboardHidesNavigationBar && keyboard\n                ? 'none'\n                : 'auto'\n              : 'none'\n          }\n          onLayout={this.handleLayout}\n        >\n          <Animated.View style={[styles.barContent, { backgroundColor }]}>\n            <SafeAreaView\n              forceInset={{ top: 'never', bottom: 'always' }}\n              style={[styles.items, { maxWidth: maxTabBarWidth }]}\n            >\n              {shifting ? (\n                <Animated.View\n                  pointerEvents=\"none\"\n                  style={[\n                    styles.ripple,\n                    {\n                      // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                      // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                      top: (BAR_HEIGHT - rippleSize) / 2,\n                      left:\n                        tabWidth * (navigationState.index + 0.5) -\n                        rippleSize / 2,\n                      height: rippleSize,\n                      width: rippleSize,\n                      borderRadius: rippleSize / 2,\n                      backgroundColor: getColor({\n                        route: routes[navigationState.index],\n                      }),\n                      transform: [\n                        {\n                          // Scale to twice the size  to ensure it covers the whole navigation bar\n                          scale: ripple.interpolate({\n                            inputRange: [0, 1],\n                            outputRange: [0, 8],\n                          }),\n                        },\n                      ],\n                      opacity: ripple.interpolate({\n                        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                        outputRange: [0, 0, 1, 1],\n                      }),\n                    },\n                  ]}\n                />\n              ) : null}\n              {routes.map((route, index) => {\n                const focused = navigationState.index === index;\n                const active = tabs[index];\n\n                // Scale the label up\n                const scale =\n                  labeled && shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [0.5, 1],\n                      })\n                    : 1;\n\n                // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n                const translateY = labeled\n                  ? shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [7, 0],\n                      })\n                    : 0\n                  : 7;\n\n                // We render the active icon and label on top of inactive ones and cross-fade them on change.\n                // This trick gives the illusion that we are animating between active and inactive colors.\n                // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n                const activeOpacity = active;\n                const inactiveOpacity = active.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [1, 0],\n                });\n\n                const badge = getBadge({ route });\n\n                return renderTouchable({\n                  key: route.key,\n                  route,\n                  borderless: true,\n                  centered: true,\n                  rippleColor: touchColor,\n                  onPress: () => this.handleTabPress(index),\n                  testID: getTestID({ route }),\n                  accessibilityLabel: getAccessibilityLabel({ route }),\n                  accessibilityTraits: focused\n                    ? ['button', 'selected']\n                    : 'button',\n                  accessibilityComponentType: 'button',\n                  accessibilityRole: 'button',\n                  accessibilityState: { selected: true },\n                  style: styles.item,\n                  children: (\n                    <View pointerEvents=\"none\">\n                      <Animated.View\n                        style={[\n                          styles.iconContainer,\n                          { transform: [{ translateY }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={route.icon as IconSource}\n                              color={activeTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: inactiveOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: false,\n                              color: inactiveTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={route.icon as IconSource}\n                              color={inactiveTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <View\n                          style={[\n                            styles.badgeContainer,\n                            {\n                              right:\n                                (badge != null && typeof badge !== 'boolean'\n                                  ? String(badge).length * -2\n                                  : 0) - 2,\n                            },\n                          ]}\n                        >\n                          {typeof badge === 'boolean' ? (\n                            <Badge visible={badge} size={8} />\n                          ) : (\n                            <Badge visible={badge != null} size={16}>\n                              {badge}\n                            </Badge>\n                          )}\n                        </View>\n                      </Animated.View>\n                      {labeled ? (\n                        <Animated.View\n                          style={[\n                            styles.labelContainer,\n                            { transform: [{ scale }] },\n                          ]}\n                        >\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: activeOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: true,\n                                color: activeTintColor,\n                              })\n                            ) : (\n                              <Text\n                                style={[\n                                  styles.label,\n                                  { color: activeTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                          {shifting ? null : (\n                            <Animated.View\n                              style={[\n                                styles.labelWrapper,\n                                { opacity: inactiveOpacity },\n                              ]}\n                            >\n                              {renderLabel ? (\n                                renderLabel({\n                                  route,\n                                  focused: false,\n                                  color: inactiveTintColor,\n                                })\n                              ) : (\n                                <Text\n                                  style={[\n                                    styles.label,\n                                    { color: inactiveTintColor },\n                                  ]}\n                                >\n                                  {getLabelText({ route })}\n                                </Text>\n                              )}\n                            </Animated.View>\n                          )}\n                        </Animated.View>\n                      ) : (\n                        <View style={styles.labelContainer} />\n                      )}\n                    </View>\n                  ),\n                });\n              })}\n            </SafeAreaView>\n          </Animated.View>\n        </Surface>\n      </View>\n    );\n  }\n}\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%',\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  label: {\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]}