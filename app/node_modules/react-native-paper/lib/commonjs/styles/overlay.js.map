{"version":3,"sources":["overlay.tsx"],"names":["overlay","elevation","surfaceColor","DarkTheme","colors","surface","Animated","Value","inputRange","interpolate","outputRange","map","calculateColor","overlayTransparency","elevationOverlayTransparency","mix","hex"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEe,SAASA,OAAT,CACbC,SAAkC,GAAG,CADxB,EAEbC,YAAoB,GAAGC,mBAAUC,MAAV,CAAiBC,OAF3B,EAGb;AACA,MAAIJ,SAAS,YAAYK,sBAASC,KAAlC,EAAyC;AACvC,UAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,CAAnB;AACA,WAAOP,SAAS,CAACQ,WAAV,CAAsB;AAC3BD,MAAAA,UAD2B;AAE3BE,MAAAA,WAAW,EAAEF,UAAU,CAACG,GAAX,CAAgBV,SAAD,IAAe;AACzC,eAAOW,cAAc,CAACV,YAAD,EAAeD,SAAf,CAArB;AACD,OAFY;AAFc,KAAtB,CAAP;AAMD;;AACD,SAAOW,cAAc,CAACV,YAAD,EAAeD,SAAf,CAArB;AACD;;AACD,SAASW,cAAT,CAAwBV,YAAxB,EAA8CD,SAA9C,EAAiE;AAC/D,MAAIY,mBAAJ;;AACA,MAAIZ,SAAS,IAAI,CAAb,IAAkBA,SAAS,IAAI,EAAnC,EAAuC;AACrCY,IAAAA,mBAAmB,GAAGC,4BAA4B,CAACb,SAAD,CAAlD;AACD,GAFD,MAEO,IAAIA,SAAS,GAAG,EAAhB,EAAoB;AACzBY,IAAAA,mBAAmB,GAAGC,4BAA4B,CAAC,EAAD,CAAlD;AACD,GAFM,MAEA;AACLD,IAAAA,mBAAmB,GAAGC,4BAA4B,CAAC,CAAD,CAAlD;AACD;;AACD,SAAO,oBAAMZ,YAAN,EACJa,GADI,CACA,oBAAM,OAAN,CADA,EACgBF,mBAAmB,GAAG,IADtC,EAEJG,GAFI,EAAP;AAGD;;AACD,MAAMF,4BAAsD,GAAG;AAC7D,KAAG,CAD0D;AAE7D,KAAG,CAF0D;AAG7D,KAAG,CAH0D;AAI7D,KAAG,CAJ0D;AAK7D,KAAG,EAL0D;AAM7D,KAAG,EAN0D;AAO7D,KAAG,IAP0D;AAQ7D,KAAG,EAR0D;AAS7D,KAAG,IAT0D;AAU7D,MAAI,EAVyD;AAW7D,MAAI,IAXyD;AAY7D,MAAI,EAZyD;AAa7D,MAAI,KAbyD;AAc7D,MAAI,IAdyD;AAe7D,MAAI,KAfyD;AAgB7D,MAAI,EAhByD;AAiB7D,MAAI,KAjByD;AAkB7D,MAAI,KAlByD;AAmB7D,MAAI,KAnByD;AAoB7D,MAAI,KApByD;AAqB7D,MAAI,IArByD;AAsB7D,MAAI,KAtByD;AAuB7D,MAAI,KAvByD;AAwB7D,MAAI;AAxByD,CAA/D","sourcesContent":["import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nexport default function overlay(\n  elevation: number | Animated.Value = 1,\n  surfaceColor: string = DarkTheme.colors.surface\n) {\n  if (elevation instanceof Animated.Value) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map((elevation) => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n  return calculateColor(surfaceColor, elevation);\n}\nfunction calculateColor(surfaceColor: string, elevation: number) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor)\n    .mix(color('white'), overlayTransparency * 0.01)\n    .hex();\n}\nconst elevationOverlayTransparency: { [id: number]: number } = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n"]}